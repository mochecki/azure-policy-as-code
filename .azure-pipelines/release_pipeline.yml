name: Policy_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
    - main

pr: none

variables: 
  PAC_OUTPUT_FOLDER: ./Output
  PAC_DEFINITIONS_FOLDER: ./Definitions

  developmentServiceConnection: 'sc-epac-dev'
  productionServiceConnection: 'sc-epac-dev'

stages:
  - stage: planStage
    displayName: Plan
    jobs:
      - template: templates/job-build-deployment-plan.yml
        parameters:
          serviceConnection: $(developmentServiceConnection)
          jobName: 'jobPlanDevelopment'
          environment: 'development'

      - template: templates/job-build-deployment-plan.yml
        parameters:
          serviceConnection: $(productionServiceConnection)
          jobName: 'jobPlanProduction'
          environment: 'production'
  
  - stage: deployDevelopmentStage
    displayName: Deploy Policy - development
    dependsOn:
      - planStage
    condition: and(succeeded(), not(canceled()), eq(dependencies.planStage.outputs['jobPlanDevelopment.planStep.deployPolicyChanges'], 'yes'))
    jobs:
      - template: templates/job-deploy-policies.yml
        parameters:
          serviceConnection: $(developmentServiceConnection)
          environment: 'development'

  - stage: deployRolesDevelopmentStage
    displayName: Deploy roles - development
    dependsOn:
      - deployDevelopmentStage
    condition: and(succeeded(), not(canceled()), eq(dependencies.planStage.outputs['jobPlanDevelopment.planStep.deployRoleChanges'], 'yes'))
    jobs: 
      - template: templates/job-deploy-roles.yml
        parameters:
          serviceConnection: $(developmentServiceConnection)
          environment: 'development'

  - stage: deployProductionStage
    displayName: Deploy Policy - production
    dependsOn:
      - deployRolesDevelopmentStage
    condition: and(succeeded(), not(canceled()), eq(dependencies.planStage.outputs['jobPlanProduction.planStep.deployPolicyChanges'], 'yes'))
    jobs:
      - template: templates/job-deploy-policies.yml
        parameters:
          serviceConnection: $(productionServiceConnection)
          environment: 'production'

  - stage: deployRolesProductionStage
    displayName: Deploy roles - production
    dependsOn:
      - deployProductionStage
    condition: and(succeeded(), not(canceled()), eq(dependencies.planStage.outputs['jobPlanProduction.planStep.deployRoleChanges'], 'yes'))
    jobs: 
      - template: templates/job-deploy-roles.yml
        parameters:
          serviceConnection: $(productionServiceConnection)
          environment: 'production'